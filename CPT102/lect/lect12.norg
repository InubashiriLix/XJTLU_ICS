* Linked Structure
  - Testing collection implementations
  - Queues
  - Motivation for linked Lists
  - Linked structure for implementing Collections

* CallBack
  - ArrayList:O(n) to add/remove, except at end
  - Stack: O(1)
  - ArraySet: O(n) (add/find/remove) (<- cost of searching)

* test method:
** Write a test method
   - As part of the class or as aseperate testing class
   - Should test all the operations
   - Should test normal and extreme cases

** Good Practice
   - write it first (black box testing)
   - implement the collection
   - extend the test method to cover the special cases of the 
     implementation (white box testing)

** Nicer design uses tests/assertions 
   - check that the code does the right thing
   - only report when there is a problem or error

** May take longer to write than the collection code!

* Queues
* 队列实现比较

** 简单数组队列
*** Struct
    - data: \[A, B, C, D, \_, _, _]
    - count = 4
*** Ops
**** offer(x)
     @code java
     data[count++] = x;
     @end
**** poll()
     @code java
     // 取出元素
     T x = data[0];
     // 将后面元素前移
     for (int i = 1; i < count; i++) {
         data[i - 1] = data[i];
     }
     count--;
     return x;
     @end
*** time cost
    - offer: O(1)
    - poll:  O(n)
*** spcae util
    - 只能在数组前端连续使用，已出队槽位无法复用

** 环形数组队列
*** Struct
    - data: \[…]（固定长度数组）
    - front, back, count

*** Ops
**** offer(x)
        @code java
        data[back] = x;
        back = (back + 1) % data.length;
        count++;
        @end
**** poll()
        @code java
        T x = data[front];
        front = (front + 1) % data.length;
        count--;
        return x;
        @end
*** time cost
    - offer: O(1)
    - poll:  O(1)
*** space util
    - 出队后腾出的槽位可被后续入队复用
***  ensureCapacity
    @code java
    // 1. 创建 newData，容量为 oldCapacity * 2
    // 2. System.arraycopy(data, front, newData, 0, oldCapacity - front);
    // 3. System.arraycopy(data, 0, newData, oldCapacity - front, back);
    // 4. front = 0; back = count;
    @end

** How to insert fast:
   - items must be sorted, to use binary search
   - but array stored in the contigrous chunk of memory must be slow
   => can not insert fast if we use array structure
   - to insert  fast, we need each item to be in its own chunk of memory


* Linked List 
** Structure
   put each value in an obejct with a field for a link t6o hte next
   - Traverse the  list by following the links
   - Insert by changing linkes
   - Remove by changing links

** Insertion
*** Empty List Insertion
    StartPtr => NULL
    (insertion)
    StartPtr => element1
*** Sorted List Insertion
    A B C D F G (insert E)
    D => nextPtr = E
    E => nextPtr=  F
    ==> A B C D E F G

** Deletion
   2 3 4 5 6 7
   delete 4
   3.nextPtr = 5
   done, 2 3 5 6 7

** Linked List Structure: Alternative Views
*** Can be drawn like Nodes inside Nodes (see the ppt)
*** but Pointers are better cause 
    - each node contains a reference to the next node
    - reference = memory location of / pointer to the object
*** Can view a node in two ways
    - an object containingt two field
    - the head oif a linked llist of values
** Shit notes
*** when you use the key word "new"
   - creating an object will allocate some heap memory for the object
   - new returns the address of the chunk of memory
   - copying the address doees not copy the chunk of memory
*** Memory from the heap must be recycled after use
    - free up by the garbage collector

*** address allocation map
    high address < -------- ----- > low address
    stack, free mem, heap, static data, code

** LinkedNode implementation
   @code java
   package Linked;

   public class LinkedNode<T> {

       private T data;
       private LinkedNode<T> next;

       public T get() {
           return data;
       }

       public void set(T item) {
           this.data = item;
       }

       public LinkedNode<T> next() {
           return next;
       }

       public void setNext(LinkedNode<T> next) {
           this.next = next;
       }

       public LinkedNode(T data, LinkedNode<T> next) {
           this.data = data;
           this.next = next;
       }

   }
   @end


** Using Example
   @code java
   @enpackage Linked;

   import Linked.LinkedNode;

   public class UsingExample {
       public UsingExample() {
           // LinkedNode<String> colors = new LinkedNode<>("red", null);
           // colors.setNext(new LinkedNode<>("blue", null));
           // colors = new LinkedNode<String>("green", colors);
           // another way to setup
           // from the end to the front ptr, the colors is the ptr
           var colors = new LinkedNode<String>("blue", null);
           colors = new LinkedNode<String>("red", colors);
           colors = new LinkedNode<String>("green", colors);

           System.out.format("1st, %s\n", colors.get());
           System.out.format("2nd, %s\n", colors.next().get());
           System.out.format("3rd, %s\n", colors.next().next().get());

           // green -> red -> blue

           // delete the red
           // green -> blue
           colors.setNext(colors.next().next());
           System.out.format("1st, %s\n", colors.get());
           System.out.format("2nd, %s\n", colors.next().get());

           // insert the node red between the green and blue
           var red = new LinkedNode<String>("red", colors.next());
           colors.setNext(red);

           // insert the new node called start at the beginging of the LinkedNodes
           colors = new LinkedNode<String>("start", colors);

           // insert thew new node called end at the end of the LinkedNodes
           // find the last node (not null)
           var temp_ptr1 = colors;
           var last = colors;
           while (temp_ptr1 != null) {
               last = temp_ptr1;
               temp_ptr1 = temp_ptr1.next();
           }
           // update the node
           last.setNext(new LinkedNode<String>("end", null));

           // iterate the linked nodes
           // should be like
           // start -> green -> red -> blue -> end
           var temp_ptr = colors;
           while (temp_ptr != null) {
               System.out.format("%s ", temp_ptr.get());
               temp_ptr = temp_ptr.next();
           }

           // copying the node list
           var temp_ptr_copy = new LinkedNode<String>(null, null);
           var copy_head = temp_ptr_copy;
           var temp_ptr2 = colors;
           while (temp_ptr2 != null) {
               temp_ptr_copy.setNext(new LinkedNode<String>(temp_ptr2.get(), null));
               temp_ptr_copy = temp_ptr_copy.next();
               temp_ptr2 = temp_ptr2.next();
           }
           copy_head = copy_head.next(); // skip the first node which is null

           // show the copy node list
           System.out.println("\ncopy show");
           var shit_ptr = copy_head;
           while (shit_ptr != null) {
               System.out.format("%s ", shit_ptr.get());
               shit_ptr = shit_ptr.next();
           }

       }
   }
   @end



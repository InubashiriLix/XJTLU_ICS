PART2

question1
1 
algorithm p_time(T[0...n-1], P[0...m-1])
cnt = 0
for ch_t = 0 to n-1 do
    cnt_inner = 0
    for ch_p = 0 to m-1 do
        if T[ch_t] == P[ch_p] then
            return ch_t - ch_p
            cnt_inner = cnt_inner + 1
        else
            break;
    if cnt_inner == m then
        cnt = cnt + 1

if cnt != 1 then
    return "No"
else return "Yes"

algorithm findonce(T[0 ... n-1], P[0 .. m-1])
    match_cnt = 0 
    for i = 0 to n - m do
        inner_match_cnt = 0;
        for j = 0 to m - 1 do
            if T[i + j] == P[j] then
                inner_match_cnt = inner_match_cnt + 1
            else
                break;
        if inner_match_cnt == m then match_cnt = match_cnt + 1
        if match_cnt > 1 then return "No"
    if match_cnt == 1 then return "Yes"
    else return "No"

2.   worst case: 
    like all failed in the last cahr
    CCCCCC
    CA
    T(n, m) = {
        ( n - m ) * m 
    }
    O(n) = O(nm - m^2)
    that is O(nm)


2
worst case 
like
AAAAAAAA
A

T(n, m) = {n * m}
O(n * m)

question2

2
n    0   1   2   3   4   5   6 
F(n) 0   1   1   2   3   5   8

F(n) = F(n - 1) + F(n - 2)

3
F(6) = F(5) + F(4) = ... = 8

4.
algorithm ways(n) 
if n == 0 return 0
if n <= 2 return 1
T[0] = 0;
T[1] = T[2] = 1
for i = 3 to n do
    begin
    T[i] = T[i - 1] + T[i - 2]
    end
return T[n]

T(n) = {2 + n - 3 if n >= 3 else 1}
T(n) = O(n)

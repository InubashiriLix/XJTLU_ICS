ques1
for i = 0 to n -2 do
    for j = n - 1 downto i + 1 do
        if A[j]<A[j - 1] then swap(A[j], A[j - 1])
1. 
0 -> 6 1 2 3 4 5
1 -> 1 6 2 3 4 5
2 -> 1 2 6 3 4 5
3 -> 1 2 3 6 4 5
4 -> 1 2 3 4 6 5
5 -> 1 2 3 4 5 6

2.
15

ques2
0 [6 1 2 3 4 5]
1 [1 2 6] [3 4 5] [1 2 3 4 5 5] -> 11111

2 [6] [1 2] [1 2 6] -> 2
3 [1] [2] [1 2] -> 1

4 [3] [4 5] [3 4 5] -> 1
5 [4 5] -> 1
-> 10

3.
T(n) = 2T(n / 2) + n = 2{2(T(n / 4)) + n / 2} + n = 4T(n / 4) + 2n
T(n) = 2^i(T(n/2^i)) + (i)n
2 ^ i = n
n = 2^k
=> i = log2 (n)
T(n) = n(T(1)) +  log2(n) * n
T(n) = n + log2(n) * n => log2(n)*n

4
Algorithm MergeLargest(A[0 ... n -1]) 
if (n == 1) return 0

mid = n / 2 
idx1 = MergeLargest(A[0 ... mid - 1])
idx2 = MergeLargest(A[mid, n -1])

if A[idx1] > A[ idx2 ] then
    return idx1
else 
    retrun idx2

sol: 
T = (1 if n = 1, 2(T(n / 2)) + 1 else)
T = 2(T(n / 2)) + 1
T = 2^i * T(n / 2^1) + i
    sinse n = 2^k and k = i 
= 2^log2(n) * T(1) + log2(n)
= n + 1 + log2(n)
=> n

5. 
Algorithm MergeMaxMin(A[0 ... n - 1])
if (n = 1) then return A[0]
    mid = n / 2 down
    Max1, Min1 = MergeMaxMin(A[0 ... mid - 1])
    Max2, Min2 = MergeMaxMin(A[mid ... n - 1])
    return Max(Max1, Max2), Min(Min1, Min2)

=> n


